for (iWin in 1:nWin){
histSpot = ld_sp[iWin:iWin+WinLen-1,]
histFut = ld_fp[iWin:iWin+WinLen-1,]
HR[iWin,] =  sd(histSpot)*cor(histSpot,histFut)/sd(histFut)
}
HR
sd(histSpot)*cor(histSpot,histFut)
sd(histSpot)
histSpot
styler:::style_selection()
usethis::use_vignette("get_started","Getting started with test package")
x = matrix(rnorm(100), 50, 2)
source('~/new folder/Hedge/R/hedge.R', echo=TRUE)
devtools::load_all(".")
usethis::use_package("aTSA", type = "Imports")
usethis::use_package("aTSA", type = "Suggests")
usethis::use_package("aTSA", type = "Imports")
adf.test(ld_sp, nlag = 0, output = TRUE)
library(aTSA)
adf.test(ld_sp, nlag = 0, output = TRUE)
adf.test(ld_sp, nlag = 1, output = TRUE)
adf.test(x, nlag = 1, output = TRUE)
adf.test(x[1,], nlag = 1, output = TRUE)
library(readxl)
data <- read_excel("~/2021 course work/AGEC 643/data.xlsx")
View(data)
fxfutures = as.numeric(fxfutures)
x <-data
fxfutures = as.numeric(fxfutures)
x <- na.omit(x)
styler:::style_selection()
styler:::style_selection()
source("hedge.R")
library(readr)
fxdata <- read_csv("data/fxdata.csv")
x <-fxdata
# drop the observation with NaN values
x <- na.omit(x)
# Check the compatibility of WinLen
if (WinLen <= 0) {
stop("Window Length should be positive")
}
# variable setting
p <- ncol(x)
n <- nrow(x)
# spot price
sp <- x[, 1]
# futures price
fp <- x[, 2:p]
# take the log difference to remove non-stationarity
lsp <- log(sp)
ld_sp <- lsp[(1 + 1):n, ] - lsp[1:(n - 1), ]
lfp <- log(fp)
ld_fp <- lfp[(1 + 1):n, ] - lfp[1:(n - 1), ]
# Minimum variance Hedge ratio
# WinLen = 15       # window length
# out of sample
OoSLen <- WinLen
# Number of windows
nObs <- nrow(ld_sp)
# Number of futures contracts
nFut <- ncol(ld_fp)
# Total number of windows
nWin <- nObs - WinLen - OoSLen + 1
# construct an empty storage for HR, history data
HR <- matrix(0, nrow = nWin, ncol = nFut)
histSpot <- matrix(0, nrow = WinLen, ncol = 1)
histFut <- matrix(0, nrow = WinLen, ncol = 1)
HE <- matrix(0, nrow = nWin, ncol = nFut)
WinLen = 15
OoSLen <- WinLen
# Number of windows
nObs <- nrow(ld_sp)
# Number of futures contracts
nFut <- ncol(ld_fp)
# Total number of windows
nWin <- nObs - WinLen - OoSLen + 1
# construct an empty storage for HR, history data
HR <- matrix(0, nrow = nWin, ncol = nFut)
histSpot <- matrix(0, nrow = WinLen, ncol = 1)
histFut <- matrix(0, nrow = WinLen, ncol = 1)
HE <- matrix(0, nrow = nWin, ncol = nFut)
for (iWin in 1:nWin) {
# historical spot price
histSpot[, nWin] <- ld_sp[iWin:iWin + WinLen - 1, ]
histFut[, nWin] <- ld_fp[iWin:iWin + WinLen - 1, ]
HR[iWin, ] <- (sd(histSpot) * cor(histSpot, histFut)) / sd(histFut)
""
}
# construct an empty storage for HR, history data
HR <- matrix(0, nrow = nWin, ncol = nFut)
histSpot <- matrix(0, nrow = WinLen, ncol = nWin)
histFut <- matrix(0, nrow = WinLen, ncol = nWin)
HE <- matrix(0, nrow = nWin, ncol = nFut)
for (iWin in 1:nWin) {
# historical spot price
histSpot[, nWin] <- ld_sp[iWin:iWin + WinLen - 1, ]
histFut[, nWin] <- ld_fp[iWin:iWin + WinLen - 1, ]
HR[iWin, ] <- (sd(histSpot) * cor(histSpot, histFut)) / sd(histFut)
}
histSpot
View(histFut)
View(histFut)
for (iWin in 1:nWin) {
# historical spot price
histSpot[, nWin] <- ld_sp[iWin:iWin + WinLen - 1, ]
histFut[, nWin] <- ld_fp[iWin:iWin + WinLen - 1, ]
}
histSpot
sum(histSpot)
View(histSpot)
View(histSpot)
histFut
sum(histFut)
sum(ld_sp)
sum(ld_fp)
for (iWin in 1:nWin) {
# historical spot price
histSpot[, nWin] <- ld_sp[iWin:iWin + WinLen - 1, ]
histFut[, nWin] <- ld_fp[iWin:iWin + WinLen - 1, ]
HR[iWin, ] <- (sd(histSpot[, nWin]) * cor(histSpot[, nWin], histFut[, nWin])) / sd(histFut[, nWin])
}
HR
sd(histSpot[,
1]
)
histSpot[,1]
histSpot[,2]
histSpot[,3]
ld_sp
ld_sp[1:15,]
sd(ld_sp[1:15,])
for (iWin in 1:nWin) {
# historical spot price
histSpot[, iWin] <- ld_sp[iWin:iWin + WinLen - 1, ]
histFut[, iWin] <- ld_fp[iWin:iWin + WinLen - 1, ]
HR[iWin, ] <- (sd(histSpot[, nWin]) * cor(histSpot[, nWin], histFut[, nWin])) / sd(histFut[, nWin])
}
histSpot
histSpot[,1]
histSpot[,2]
histSpot[,4]
for (iWin in 1:nWin) {
# historical spot price
histSpot <- ld_sp[iWin:iWin + WinLen - 1, ]
histFut <- ld_fp[iWin:iWin + WinLen - 1, ]
HR[iWin, ] <- (sd(histSpot) * cor(histSpot, histFut)) / sd(histFut)
}
HR
histSpot
ld_sp[1:15,]
ld_sp[2,16,]
ld_sp[2:16,]
for (iWin in 1:nWin) {
# historical spot price
histSpot[,iWin] <- ld_sp[iWin:iWin + WinLen - 1, ]
histFut[,iWin] <- ld_fp[iWin:iWin + WinLen - 1, ]
HR[iWin, ] <- (sd(histSpot[,iWin]) * cor(histSpot, histFut[,iWin])) / sd(histFut[,iWin])
}
histSpot[,2] = ld_sp[2:16,]
histSpot[2] = ld_sp[2:16,]
histSpot = ld_sp[2:16,]
histSpot
sd(histSpot)
histFut = ld_fp[2:16,]
cor(histSpot,histFut)
sd(histSpot) * cor(histSpot,histFut)/sd(histFut)
# construct an empty storage for HR, history data
HR <- matrix(0, nrow = nWin, ncol = nFut)
histSpot <- matrix(0, nrow = WinLen, ncol = 1)
histFut <- matrix(0, nrow = WinLen, ncol = 1)
HE <- matrix(0, nrow = nWin, ncol = nFut)
for (iWin in 1:nWin) {
# historical spot price
histSpot <- ld_sp[iWin:iWin + WinLen - 1, ]
histFut <- ld_fp[iWin:iWin + WinLen - 1, ]
HR[iWin, ] <- (sd(histSpot) * cor(histSpot, histFut)) / sd(histFut)
}
histSpot
for (iWin in 1:1) {
# historical spot price
histSpot <- ld_sp[iWin:iWin + WinLen - 1, ]
histFut <- ld_fp[iWin:iWin + WinLen - 1, ]
HR[iWin, ] <- (sd(histSpot) * cor(histSpot, histFut)) / sd(histFut)
}
histSpot
WinLen = 15
for (iWin in 1:nWin) {
# historical spot price
histSpot <- ld_sp[iWin:iWin + WinLen - 1, ]
histFut <- ld_fp[iWin:iWin + WinLen - 1, ]
HR[iWin, ] <- (sd(histSpot) * cor(histSpot, histFut)) / sd(histFut)
}
histSpot
library(pracma)
?pracma
OoSSpot <- ld_sp[16:31,]
OoSSpot
a <- replicate(OoSSpot, 1, nFut)
a <- replicate(OoSSpot, 1, nFut)
a <-  matrix(OoSSpot, 1, nFut, byrow=FALSE)
a
OoSSpot
matrix(OoSSpot, 1, nFut, bycolumn=TRUE)
matrix(OoSSpot, length(OoSSpot), nFut, byrow=FALSE)
OoSSpot
a <- OoSSpot
a
b <- matrix(OoSSpot, 1, nFut, byrow=FALSE)
b
b <- matrix(OoSSpot, length(OoSSpot), nFut, byrow=FALSE)
b
num <- matrix(1, nrow = OoSLen, ncol = 1)
wOoS <- num / OoSLen
wOoS
styler:::style_selection()
semivar <- function(v, w) {
meanV <- w * v
SV <- w * (pmax(matrix(meanV, length(meanV), 1) - v, 0))^2
return(SV)
}
w= 1/15
v= [1,2,3,4,5,6,8,9,10,11,12,13,14,15]
v= c(1,2,3,4,5,6,8,9,10,11,12,13,14,15)
semivar(v,w)
w*v
v
mean(v)
matrix(1, 15, 1)
matrix(1, 15, 1)/15
w
w <- matrix(1, 15, 1)/15
w
v <- OosSpot
source("hedge.R")
library(readr)
fxdata <- read_csv("data/fxdata.csv")
x <-fxdata
WinLen = 15
# Make the dataset balanced & remove NaN observations
# drop the observation with NaN values
x <- na.omit(x)
# Check the compatibility of WinLen
if (WinLen <= 0) {
stop("Window Length should be positive")
}
# variable setting
p <- ncol(x)
n <- nrow(x)
# spot price
sp <- x[, 1]
# futures price
fp <- x[, 2:p]
# take the log difference to remove non-stationarity
lsp <- log(sp)
ld_sp <- lsp[2:n, ] - lsp[1:(n - 1), ]
lfp <- log(fp)
ld_fp <- lfp[2:n, ] - lfp[1:(n - 1), ]
OoSLen <- WinLen
# Number of windows
nObs <- nrow(ld_sp)
# Number of futures contracts
nFut <- ncol(ld_fp)
# Total number of windows
nWin <- nObs - WinLen - OoSLen + 1
# construct an empty storage for HR, history data
HR <- matrix(0, nrow = nWin, ncol = nFut)
histSpot <- matrix(0, nrow = WinLen, ncol = 1)
histFut <- matrix(0, nrow = WinLen, ncol = 1)
HE <- matrix(0, nrow = nWin, ncol = nFut)
for (iWin in 1:nWin) {
# historical spot price
histSpot <- ld_sp[iWin:(iWin + WinLen - 1), ]
histFut <- ld_fp[iWin:(iWin + WinLen - 1), ]
HR[iWin, ] <- (sd(histSpot) * cor(histSpot, histFut)) / sd(histFut)
# Out-of-sample is testing the hedge ratio obtained above using samples that were not included in historical data.
# selecting out of sample for spot price
OoSSpot <- ld_sp[(iWin + WinLen):(iWin + WinLen + OoSLen - 1), ]
# selecting out of sample for futures price
OoSFut <- ld_fp[(iWin + WinLen):(iWin + WinLen + OoSLen - 1), ]
# getting a modified hedge ratio
# hr_mod is length(nWin) vector
hr_mod <- HR[iWin, ] * fp[(iWin + WinLen), ] / sp[(iWin + WinLen), ]
# prof_nh is length(WinLen) column vector when h = 0, which is equal to spot price.
Prof_nh <- OoSSpot
# prof_h is length(WinLen) x nFut matrix when h is not 0.
Prof_h <- matrix(OoSSpot, length(OoSSpot), nFut, byrow = FALSE) - (matrix(hr_mod, OoSLen, 1) * as.matrix(OoSFut))
# calculate the hedging effectiveness by comparing the variance of the profits for each portfolio.
var_h[iWin, ] <- var(Prof_h)
var_nh[iWin, ] <- var(Prof_nh)
HE[iWin, ] <- (var(Prof_h) - var(Prof_nh)) / var(Prof_nh)
}
Prof_nh <- OoSSpot
semivar <- function(v, w) {
meanV <- w * v
SV <- w * (pmax(matrix(meanV, length(meanV), 1) - v, 0))^2
return(SV)
}
semivar(OoSSpot, w)
OoSSpot *w
crossprod(w, v)
w
v
OoSSpot
crossprod(w,OoSSpot)
w
w
w
w
w
w
w
semivar <- function(v, w) {
meanV <- crossprod(w, v)
SV <- crossprod(w, (pmax(matrix(meanV, length(meanV), 1) - v, 0))^2)
return(SV) #scalar
}
semivar(OoSSpot, w)
#' @examples
semivar <- function(v, w) {
meanV <- crossprod(w, v)
SV <- crossprod(w, (pmax(as.vector(meanV, length(meanV), 1) - v, 0))^2)
return(SV) #scalar
}
semivar(OoSSpot, w)
HR0 <- 1
HR_sv <- matrix(0, nWin, nFut)
HE_sv <- matrix(0, nWin, nFut)
# out of sample
OoSLen <- WinLen
# Number of windows
nObs <- nrow(ld_sp)
# Number of futures contracts
nFut <- ncol(ld_fp)
# Total number of windows
nWin <- nObs - WinLen - OoSLen + 1
for (iWin in 1:nWin) {
histSpot <- ld_sp(iWin:iWin + WinLen - 1, )
# weight for the historical price
wHist <- matrix(1, WinLen, 1) / WinLen
num <- matrix(1, nrow = OoSLen, ncol = 1)
wOoS <- num / OoSLen
OoSSpot <- ld_sp[iWin + WinLen:iWin + WinLen + OoSLen - 1, ]
OoSFut <- ld_fp[iWin + WinLen:iWin + WinLen + OoSLen - 1, ]
for (iFut in 1:nFut) {
v <- OoSSpot - h * (fp[iWin + WinLen, iFut] / sp[iWin + WinLen, ]) * OoSFut[, iFut]
SVObj <- SemiVar(v, wHist)
HR_sv[iWin, iFut] <- fminsearch(SVObj, HR0, minimize = TRUE)
}
Prof_h_sv <- matrix(OoSSpot, length(OoSSpot), nFut) - matrix(HR_sv[iWin, ] * (fp[iWin + WinLen, ] / sp[iWin + WinLen, ]), length(OoSLen), 1) * OoSFut
sv_h <- SemiVar(Prof_h_sv, wOoS)
HE_sv[iWin, ] <- (sv_h - sv_nh) / (sv_nh)
}
# initialize the matrix
HR0 <- 1
HR_sv <- matrix(0, nWin, nFut)
HE_sv <- matrix(0, nWin, nFut)
# out of sample
OoSLen <- WinLen
# Number of windows
nObs <- nrow(ld_sp)
# Number of futures contracts
nFut <- ncol(ld_fp)
# Total number of windows
nWin <- nObs - WinLen - OoSLen + 1
# semivariance with no hedging
sv_nh <- semivar(OoSSpot, wOoS)
for (iWin in 1:nWin) {
histSpot <- ld_sp[iWin:iWin + WinLen - 1, ]
# weight for the historical price
wHist <- matrix(1, WinLen, 1) / WinLen
num <- matrix(1, nrow = OoSLen, ncol = 1)
wOoS <- num / OoSLen
OoSSpot <- ld_sp[iWin + WinLen:iWin + WinLen + OoSLen - 1, ]
OoSFut <- ld_fp[iWin + WinLen:iWin + WinLen + OoSLen - 1, ]
for (iFut in 1:nFut) {
v <- OoSSpot - h * (fp[iWin + WinLen, iFut] / sp[iWin + WinLen, ]) * OoSFut[, iFut]
SVObj <- SemiVar(v, wHist)
HR_sv[iWin, iFut] <- fminsearch(SVObj, HR0, minimize = TRUE)
}
Prof_h_sv <- matrix(OoSSpot, length(OoSSpot), nFut) - matrix(HR_sv[iWin, ] * (fp[iWin + WinLen, ] / sp[iWin + WinLen, ]), length(OoSLen), 1) * OoSFut
sv_h <- SemiVar(Prof_h_sv, wOoS)
HE_sv[iWin, ] <- (sv_h - sv_nh) / (sv_nh)
}
#' @return semivariance vector SV
#' @export
#'
#' @examples
semivar <- function(v, w) {
meanV <- crossprod(w, v)
SV <- crossprod(w, (pmax(matrix(meanV, length(meanV), 1) - v, 0))^2)
return(SV) #scalar
}
SVObj <- function(h){
obj <- SemiVar(OoSSpot - h * (fp[iWin + WinLen, iFut] / sp[iWin + WinLen, ]) * OoSFut[, iFut], wHist)
return(obj)
}
HR0 <- 1
HR_sv <- matrix(0, nWin, nFut)
HE_sv <- matrix(0, nWin, nFut)
# out of sample
OoSLen <- WinLen
# Number of windows
nObs <- nrow(ld_sp)
# Number of futures contracts
nFut <- ncol(ld_fp)
# Total number of windows
nWin <- nObs - WinLen - OoSLen + 1
# semivariance with no hedging
sv_nh <- semivar(OoSSpot, wOoS)
for (iWin in 1:nWin) {
histSpot <- ld_sp[iWin:iWin + WinLen - 1, ]
# weight for the historical price
wHist <- matrix(1, WinLen, 1) / WinLen
num <- matrix(1, nrow = OoSLen, ncol = 1)
wOoS <- num / OoSLen
OoSSpot <- ld_sp[iWin + WinLen:iWin + WinLen + OoSLen - 1, ]
OoSFut <- ld_fp[iWin + WinLen:iWin + WinLen + OoSLen - 1, ]
for (iFut in 1:nFut) {
# SVObj <- SemiVar(OoSSpot - h * (fp[iWin + WinLen, iFut] / sp[iWin + WinLen, ]) * OoSFut[, iFut], wHist)
HR_sv[iWin, iFut] <- fminsearch(SVObj, HR0, minimize = TRUE)
}
Prof_h_sv <- matrix(OoSSpot, length(OoSSpot), nFut) - matrix(HR_sv[iWin, ] * (fp[iWin + WinLen, ] / sp[iWin + WinLen, ]), length(OoSLen), 1) * OoSFut
sv_h <- SemiVar(Prof_h_sv, wOoS)
HE_sv[iWin, ] <- (sv_h - sv_nh) / (sv_nh)
}
install.packages("fminsearch")
neldermead
install.packages("neldermead")
library(neldermead)
?fminsearch
??fminsearch
?pracma
??pracma
install.packages("pracma")
library(pracma)
HR_sv[iWin, iFut] <- fminsearch(SVObj, HR0, minimize = TRUE)
for (iFut in 1:nFut) {
# SVObj <- SemiVar(OoSSpot - h * (fp[iWin + WinLen, iFut] / sp[iWin + WinLen, ]) * OoSFut[, iFut], wHist)
HR_sv[iWin, iFut] <- fminsearch(SVObj, HR0, minimize = TRUE)
}
semivar <- function(v, w) {
meanV <- crossprod(w, v)
SV <- crossprod(w, (pmax(matrix(meanV, length(meanV), 1) - v, 0))^2)
return(SV) #scalar
}
SVObj <- function(h){
obj <- semivar(OoSSpot - h * (fp[iWin + WinLen, iFut] / sp[iWin + WinLen, ]) * OoSFut[, iFut], wHist)
return(obj)
}
Prof_h_sv <- matrix(OoSSpot, length(OoSSpot), nFut) - matrix(HR_sv[iWin, ] * (fp[iWin + WinLen, ] / sp[iWin + WinLen, ]), length(OoSLen), 1) * OoSFut
sv_h <- SemiVar(Prof_h_sv, wOoS)
HE_sv[iWin, ] <- (sv_h - sv_nh) / (sv_nh)
sv_h <- semivar(Prof_h_sv, wOoS)
Prof_h_sv <- matrix(OoSSpot, length(OoSSpot), nFut) - matrix(HR_sv[iWin, ] * (fp[iWin + WinLen, ] / sp[iWin + WinLen, ]), length(OoSLen), 1) * OoSFut
HR_sv
HR_sv[10,]
fp[16,]/sp[16,]
fp[16,]/sp[16,]
fp[16,]
sp[16,]
HR_sv[1,]*fp[16,]/sp[16,]
matrix(HR_sv[1,]*fp[16,]/sp[16,],length(OsOLen),1)
matrix(HR_sv[1,]*fp[16,]/sp[16,],length(OosLen),1)
matrix(HR_sv[1,]*fp[16,]/sp[16,],length(OoSLen),1)
matrix(HR_sv[1,]*fp[16,]/sp[16,],length(OoSSpot),1)
matrix(HR_sv[1,]*fp[16,]/sp[16,],length(OoSSpot),1)*OoSFut
matrix(HR_sv[1,]*fp[16,]/sp[16,],length(OoSSpot),1)
OoSFut
aa <- matrix(HR_sv[1,]*fp[16,]/sp[16,],length(OoSSpot),1)
aa
aa *OoSFut
Prof_h_sv <- matrix(OoSSpot, length(OoSSpot), nFut) - matrix(HR_sv[iWin, ] * (fp[iWin + WinLen, ] / sp[iWin + WinLen, ]), length(OoSSpot), 1) * OoSFut
Prof_h_sv <- matrix(OoSSpot, length(OoSSpot), nFut) - matrix(HR_sv[iWin, ] * (fp[iWin + WinLen, ] / sp[iWin + WinLen, ]), length(OoSSpot), 1) * OoSFut
iWin=1
WinLen=15
matrix(HR_sv[iWin, ] * (fp[iWin + WinLen, ] / sp[iWin + WinLen, ]), length(OoSSpot), 1) * as.matrix(OoSFut)
matrix(HR_sv[iWin, ] * (fp[iWin + WinLen, ]
, 15, 1)
Prof_h <- matrix(OoSSpot, length(OoSSpot), nFut, byrow = FALSE) - (matrix(hr_mod, OoSLen, 1) * as.matrix(OoSFut))
hr_mod <- HR[iWin, ] * fp[(iWin + WinLen), ] / sp[(iWin + WinLen), ]
Prof_h <- matrix(OoSSpot, length(OoSSpot), nFut, byrow = FALSE) - (matrix(hr_mod, OoSLen, 1) * as.matrix(OoSFut))
hr_mod
matrix(hr_mod, OoSLen, 1)
hr_mod
as.matrix(OoSFut)
matrix(hr_mod, OoSLen, 1) * as.matrix(OoSFut)
aaa <- matrix(hr_mod, OoSLen, 1)
bbb <- as.matrix(OoSFut)
aaa * bbb
dot
dot(aaa,bbb)
aaa%*%bbb
aaa*bbb
aaa
bbb
aaa*bbb
aaa %*% bbb
as.vector(aaa) %*% bbb
as.vector(aaa) %*% as.vector(bbb)
aaa
bbb
a = [1,2,3]
aaa
bbb
t(aaa) %*% bbb
OoSSpot
OoSSpot
aaa
OoSSpot
bbb
matrix(OoSSpot, length(OoSSpot), nFut, byrow = FALSE)
