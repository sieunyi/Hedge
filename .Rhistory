# selecting out of sample for spot price
OoSSpot <- ld_sp[(iWin + WinLen):(iWin + WinLen + OoSLen - 1), ]
# selecting out of sample for futures price
OoSFut <- ld_fp[(iWin + WinLen):(iWin + WinLen + OoSLen - 1), ]
# getting a modified hedge ratio
# hr_mod is a scalar
hr_mod <- HR[iWin, ] * fp[(iWin + WinLen), ] / sp[(iWin + WinLen), ]
# prof_nh is length(WinLen) column vector when h = 0, which is equal to spot price.
Prof_nh <- OoSSpot
# prof_h is length(WinLen) x nFut matrix when h is not 0.
Prof_h <- matrix(OoSSpot, length(OoSSpot), nFut, byrow = FALSE) - as.numeric(matrix(hr_mod, OoSLen, 1)) * as.matrix(OoSFut)
# calculate the hedging effectiveness by comparing the variance of the profits for each portfolio.
var_h[iWin, ] <- var(Prof_h)
var_nh[iWin, ] <- var(Prof_nh)
HE[iWin, ] <- (var(Prof_h) - var(Prof_nh)) / var(Prof_nh)
}
return(list(HR = HR, HE = HE))
}
#' Semivariance hedge ratio
#'
#' @param v length(WinLen x 1) price vector
#' @param w length(WinLen x 1) column vector for weight
#'
#' @return semivariance of the input vector, returns a scalar
#' @export
#'
#' @examples
#' WinLen=15
#' w <- (matrix(1, WinLen, 1)) / WinLen
#' v <- matrix(runif(WinLen, min=0, max=10), WinLen, 1)
#' semivar(v,w) #return scalar
semivar <- function(v, w) {
meanV <- as.vector(crossprod(w, v))
SV <- crossprod(w, (pmax(meanV - v, 0))^2)
return(SV) # return scalar
}
#' Semi variance hedge ratio and its effectiveness
#' @param x (n x 2) matrix of input that consists of spot price in the first column and futures prices in the second column.
#' @param WinLen Length of window
#'
#' @return (list(HR = HR, HE = HE))
#' \item{HR}{Length(nWin x 1) optimal hedge ratio matrix}
#' \item{HE}{Length(nWin x 1) hedging effectiveness matrix}
#' @export
#'
#' @examples
#' x <- matrix(runif(500, min=0, max=10), 500, 2)
#' Winlen <- 15
#' svhr(x, Winlen)
svhr <- function(x, WinLen) {
# Make the dataset balanced & remove NaN observations
# drop the observation with NaN values
x <- na.omit(x)
# Check the compatibility of WinLen
if (WinLen <= 0) {
stop("Window Length should be positive")
}
# variable setting
p <- ncol(x)
n <- nrow(x)
# spot price
sp <- x[, 1]
# futures price
fp <- x[, 2:p]
# take the log difference to remove non-stationarity
ld_sp <- diff(log(sp))
ld_fp <- diff(log(fp))
ld_sp <- as.matrix(ld_sp)
sp <- as.matrix(sp)
# Minimum variance Hedge ratio
# WinLen = 15       # window length
# out of sample
OoSLen <- WinLen
# Number of windows
nObs <- nrow(ld_sp)
# Number of futures contracts
nFut <- p-1
# Total number of windows
nWin <- nObs - WinLen - OoSLen + 1
if (nFut==1){
ld_fp = as.matrix(ld_fp)
fp = as.matrix(fp)
}
# initialize the matrix
#  HR0 <- 1
HR_sv <- matrix(0, nWin, nFut)
HE_sv <- matrix(0, nWin, nFut)
# construct an empty storage for HR, history data
histSpot <- matrix(0, nrow = WinLen, ncol = 1)
OoSSpot <- matrix(0, nrow = WinLen, ncol = 1)
OoSFut <- matrix(0, nrow = WinLen, ncol = 1)
wHist <- (matrix(1, WinLen, 1)) / WinLen
num <- matrix(1, nrow = OoSLen, ncol = 1)
wOoS <- num / OoSLen
for (iWin in 1:nWin) {
histSpot <- as.matrix(ld_sp[iWin:(iWin + WinLen - 1), ])
# weight for the historical price
OoSSpot <- as.matrix(ld_sp[(iWin + WinLen):(iWin + WinLen + OoSLen - 1), ])
OoSFut <- as.matrix(ld_fp[(iWin + WinLen):(iWin + WinLen + OoSLen - 1), ])
for (iFut in 1:nFut) {
SVObj <- function(h) semivar(matrix(as.numeric(OoSSpot - h * (fp[(iWin + WinLen), iFut] / sp[(iWin + WinLen), ]) * as.matrix(OoSFut, nrow = WinLen)[, iFut]), nrow=WinLen, 1), wHist)
result <- optimize(SVObj, interval = c(-10, 10), maximum = FALSE)
HR_sv[iWin, iFut] <- result$minimum
}
# semivariance with no hedging
sv_nh <- semivar(OoSSpot, wOoS)
Prof_h_sv <- matrix(OoSSpot, length(OoSSpot), nFut) - as.numeric(matrix(HR_sv[iWin, ] * (fp[(iWin + WinLen), ] / sp[(iWin + WinLen), ]), length(OoSSpot), nFut)) * as.matrix(OoSFut)
sv_h <- semivar(Prof_h_sv, wOoS)
HE_sv[iWin, ] <- (sv_h - sv_nh) / (sv_nh)
}
return(list(HR_sv = HR_sv, HE_sv = HE_sv))
}
x
data(fx)
spot_price = fx$...1
futures_price = fx$...2
x = cbind(spot_price, futures_price)
## basic example code
WinLen = 15
out1 <- mvhr(x, WinLen)
out2 <- svhr(x, WinLen)
plot(out2$HE_sv, type = 'l', col=1)
lines(out1$HE, type='l', col=3)
library(Hedge)
library(Hedge)
usethis::use_packages("stats", "cor", "na.omit", "optimize", "sd", "var", imports)
usethis::use_package("stats", "cor", "na.omit", "optimize", "sd", "var", imports)
usethis::use_package("stats")
usethis::use_package("cor")
usethis::use_package("stats", "cor", "na.omit", "optimize", "sd", "var")
usethis::use_package(na.omit", "optimize", "sd", "var")
usethis::use_package(na.omit)
usethis::use_package("na.omit"\)
usethis::use_package("na.omit")
usethis::use_package(c(optimize", "sd", "var"))
usethis::use_package(c("optimize", "sd", "var"))
usethis::use_package("optimize")
usethis::use_package("sd")
usethis::use_package("var")
library(Hedge)
library(Hedge)
usethis::use_github_actions_badge(name = "R-CMD-check",
repo_spec = NULL)
usethis::use_coverage()
library(Hedge)
library(Hedge)
library(Hedge)
data(fx)
spot_price = fx$...1
futures_price = fx$...2
x = cbind(spot_price, futures_price)
## basic example code
WinLen = 15
out1 <- mvhr(x, WinLen)
out2 <- svhr(x, WinLen)
# compare hedging effectiveness
plot(out2$HE_sv, type = 'l', col=1)
lines(out1$HE, type='l', col=3)
library(Hedge)
fx
load(fx)
data(fx)
library(Hedge)
View(fx)
#' minimum variance hedge ratio function
#'
#' @param x (n x 2) matrix of input that consists of spot price in the first column and futures prices in the second column.
#' @param WinLen Length of window
#'
#' @return (list(HR = HR, HE = HE))
#' \item{HR}{Length(nWin x 1) optimal hedge ratio matrix}
#' \item{HE}{Length(nWin x 1) hedging effectiveness matrix}
#' @export
#' EURO/USD exchange rate and futures price of EURO .
#'
#' @examples
#' data(fx)
#' Winlen <- 15
#' mvhr(x, Winlen)
#' A dataset containing the prices and other attributes of almost 20 years
#'
#' @format A data frame with 5047 rows and 2 variables:
#' \describe{
#'   \item{...1}{EURO/USD exchange rate}
#'   \item{...2}{EURO futures price data}
#' }
#' @source \url{http://www.bloomberg.com/}
#' @usage data(fx)
#' WinLen <-15
#' x <- fx
"fx"
mvhr <- function(x, WinLen) {
# Make the dataset balanced & remove NaN observations
# drop the observation with NaN values
x <- na.omit(x)
# Check the compatibility of WinLen
if (WinLen <= 0) {
stop("Window Length should be positive")
}
# variable setting
p <- ncol(x)
n <- nrow(x)
# spot price
sp <- x[, 1]
# futures price
fp <- x[, 2:p]
# take the log difference to remove non-stationarity
ld_sp <- diff(log(sp))
ld_fp <- diff(log(fp))
ld_sp <- as.matrix(ld_sp)
sp <- as.matrix(sp)
# Minimum variance Hedge ratio
# WinLen = 15       # window length
# out of sample
OoSLen <- WinLen
# Number of windows
nObs <- nrow(ld_sp)
# Number of futures contracts
nFut <- p-1
# Total number of windows
nWin <- nObs - WinLen - OoSLen + 1
if (nFut==1){
ld_fp = as.matrix(ld_fp)
fp = as.matrix(fp)
}
# construct an empty storage for HR, history data
HR <- matrix(0, nrow = nWin, ncol = nFut)
histSpot <- matrix(0, nrow = WinLen, ncol = 1)
histFut <- matrix(0, nrow = WinLen, ncol = 1)
HE <- matrix(0, nrow = nWin, ncol = nFut)
var_h <- matrix(0, nrow = nWin, ncol = nFut)
var_nh <- matrix(0, nrow = nWin, ncol = nFut)
for (iWin in 1:nWin) {
# historical spot price
histSpot <- ld_sp[iWin:(iWin + WinLen - 1), ]
histFut <- ld_fp[iWin:(iWin + WinLen - 1), ]
HR[iWin, ] <- (sd(histSpot) * cor(histSpot, histFut)) / sd(histFut)
# Out-of-sample is testing the hedge ratio obtained above using samples that were not included in historical data.
# selecting out of sample for spot price
OoSSpot <- ld_sp[(iWin + WinLen):(iWin + WinLen + OoSLen - 1), ]
# selecting out of sample for futures price
OoSFut <- ld_fp[(iWin + WinLen):(iWin + WinLen + OoSLen - 1), ]
# getting a modified hedge ratio
# hr_mod is a scalar
hr_mod <- HR[iWin, ] * fp[(iWin + WinLen), ] / sp[(iWin + WinLen), ]
# prof_nh is length(WinLen) column vector when h = 0, which is equal to spot price.
Prof_nh <- OoSSpot
# prof_h is length(WinLen) x nFut matrix when h is not 0.
Prof_h <- matrix(OoSSpot, length(OoSSpot), nFut, byrow = FALSE) - as.numeric(matrix(hr_mod, OoSLen, 1)) * as.matrix(OoSFut)
# calculate the hedging effectiveness by comparing the variance of the profits for each portfolio.
var_h[iWin, ] <- var(Prof_h)
var_nh[iWin, ] <- var(Prof_nh)
HE[iWin, ] <- (var(Prof_h) - var(Prof_nh)) / var(Prof_nh)
}
return(list(HR = HR, HE = HE))
}
#' Semivariance hedge ratio
#'
#' @param v length(WinLen x 1) price vector
#' @param w length(WinLen x 1) column vector for weight
#'
#' @return semivariance of the input vector, returns a scalar
#' @export
#'
#' @examples
#' WinLen=15
#' w <- (matrix(1, WinLen, 1)) / WinLen
#' v <- matrix(runif(WinLen, min=0, max=10), WinLen, 1)
#' semivar(v,w) #return scalar
semivar <- function(v, w) {
meanV <- as.vector(crossprod(w, v))
SV <- crossprod(w, (pmax(meanV - v, 0))^2)
return(SV) # return scalar
}
#' Semi variance hedge ratio and its effectiveness
#' @param x (n x 2) matrix of input that consists of spot price in the first column and futures prices in the second column.
#' @param WinLen Length of window
#'
#' @return (list(HR_sv = HR_sv, HE_sv = HE_sv))
#' \item{HR_sv}{Length(nWin x 1) optimal hedge ratio matrix}
#' \item{HE_sv}{Length(nWin x 1) hedging effectiveness matrix}
#' @export
#' EURO/USD exchange rate and futures price of EURO .
#'
#' @examples
#' data(fx)
#' Winlen <- 15
#' svhr(x, Winlen)
#' A dataset containing the prices and other attributes of almost 20 years
#'
#' @format A data frame with 5047 rows and 2 variables:
#' \describe{
#'   \item{...1}{EURO/USD exchange rate}
#'   \item{...2}{EURO futures price data}
#' }
#' @source \url{http://www.bloomberg.com/}
#' @usage data(fx)
"fx"
svhr <- function(x, WinLen) {
# Make the dataset balanced & remove NaN observations
# drop the observation with NaN values
x <- na.omit(x)
# Check the compatibility of WinLen
if (WinLen <= 0) {
stop("Window Length should be positive")
}
# variable setting
p <- ncol(x)
n <- nrow(x)
# spot price
sp <- x[, 1]
# futures price
fp <- x[, 2:p]
# take the log difference to remove non-stationarity
ld_sp <- diff(log(sp))
ld_fp <- diff(log(fp))
ld_sp <- as.matrix(ld_sp)
sp <- as.matrix(sp)
# Minimum variance Hedge ratio
# WinLen = 15       # window length
# out of sample
OoSLen <- WinLen
# Number of windows
nObs <- nrow(ld_sp)
# Number of futures contracts
nFut <- p-1
# Total number of windows
nWin <- nObs - WinLen - OoSLen + 1
if (nFut==1){
ld_fp = as.matrix(ld_fp)
fp = as.matrix(fp)
}
# initialize the matrix
#  HR0 <- 1
HR_sv <- matrix(0, nWin, nFut)
HE_sv <- matrix(0, nWin, nFut)
# construct an empty storage for HR, history data
histSpot <- matrix(0, nrow = WinLen, ncol = 1)
OoSSpot <- matrix(0, nrow = WinLen, ncol = 1)
OoSFut <- matrix(0, nrow = WinLen, ncol = 1)
wHist <- (matrix(1, WinLen, 1)) / WinLen
num <- matrix(1, nrow = OoSLen, ncol = 1)
wOoS <- num / OoSLen
for (iWin in 1:nWin) {
histSpot <- as.matrix(ld_sp[iWin:(iWin + WinLen - 1), ])
# weight for the historical price
OoSSpot <- as.matrix(ld_sp[(iWin + WinLen):(iWin + WinLen + OoSLen - 1), ])
OoSFut <- as.matrix(ld_fp[(iWin + WinLen):(iWin + WinLen + OoSLen - 1), ])
for (iFut in 1:nFut) {
SVObj <- function(h) semivar(matrix(as.numeric(OoSSpot - h * (fp[(iWin + WinLen), iFut] / sp[(iWin + WinLen), ]) * as.matrix(OoSFut, nrow = WinLen)[, iFut]), nrow=WinLen, 1), wHist)
result <- optimize(SVObj, interval = c(-10, 10), maximum = FALSE)
HR_sv[iWin, iFut] <- result$minimum
}
# semivariance with no hedging
sv_nh <- semivar(OoSSpot, wOoS)
Prof_h_sv <- matrix(OoSSpot, length(OoSSpot), nFut) - as.numeric(matrix(HR_sv[iWin, ] * (fp[(iWin + WinLen), ] / sp[(iWin + WinLen), ]), length(OoSSpot), nFut)) * as.matrix(OoSFut)
sv_h <- semivar(Prof_h_sv, wOoS)
HE_sv[iWin, ] <- (sv_h - sv_nh) / (sv_nh)
}
return(list(HR_sv = HR_sv, HE_sv = HE_sv))
}
data(fx)
spot_price = fx$...1
futures_price = fx$...2
x = cbind(spot_price, futures_price)
WinLen = 15
out1 <- mvhr(x, WinLen)
source('~/new folder/Hedge/R/hedge.R', echo=TRUE)
## basic example code
WinLen = 15
out1 <- mvhr(x, WinLen)
out2 <- svhr(x, WinLen)
library(Hedge)
library(Hedge)
usethis::use_package("na.omit", type="Imports")
usethis::use_package("stats", "cor", "na.omit", "optimize", "sd", "var", type="Imports")
usethis::use_package("cor", type="Imports")
2
usethis::use_package("na.omit", type="Imports")
usethis::use_package("optimize", type="Imports")
usethis::use_package("sd", type="Imports")
usethis::use_package("var", type="Imports")
usethis::use_package("var", type="Imports")
usethis::use_package("sd", type="Imports")
usethis::use_package("optimize", type="Imports")
usethis::use_package("na.omit", type="Imports")
library(Hedge)
library(Hedge)
library(Hedge)
library(Hedge)
library(Hedge)
library(Hedge)
library(Hedge)
library(Hedge)
library(Hedge)
library(Hedge)
library(Hedge)
usethis::use_package("sd", type= "Imports")
usethis::use_package("na.omit", type= "Imports")
library(Hedge)
library(Hedge)
library(Hedge)
library(Hedge)
?stats
library(Hedge)
library(Hedge)
devtools::install_github("sieunyi/Hedge, build_vignettes=TRUE")
devtools::install_github("sieunyi/Hedge", build_vignettes=TRUE)
library("Hedge")
usethis::use_vignette("my-vignette")
usethis::use_vignette("Hedge")
fx
library(Hedge)
library(Hedge)
library(Hedge)
devtools::build(build_args = c('--compact-vignettes=both'))
usethis::use_vignette("Hedge")
library(Hedge)
devtools::install_github("sieunyi/Hedge")
detach("package:Hedge", unload = TRUE)
devtools::install_github("sieunyi/Hedge")
library(Hedge)
?Hedge
??Hedge
remove.packages("Hedge", lib="~/R/win-library/4.1")
devtools::install_github("sieunyi/Hedge")
devtools::install_github("christithomp/scamplot", build = TRUE, build_opts = c("--no-resave-data", "--no-manual"))
devtools::install_github("sieunyi/Hedge", build = TRUE, build_opts = c("--no-resave-data", "--no-manual"))
fx
load("~/new folder/Hedge/data/fx.rda")
fx
usethis::use_data(fx, compress = "xz")
fx
library(Hedge)
devtools::install.package("sieunyi/Hedge")
devtools::install.packages("sieunyi/Hedge")
devtools::install_github("sieunyi/Hedge", build = TRUE, build_opts = c("--no-resave-data", "--no-manual"))
library(Hedge)
library(Hedge)
load("~/new folder/Hedge/data/fx.rda")
system.file("fx",package = "readr")
system.file("fx",package = "readr", mustWork=TRUE)
system.file("fx",package = "readr", mustWork=TRUE)
system.file("fx",package = "readr")
system.file("fx", "fx.csv", package = "readr", mustWork=TRUE)
tools::checkRdaFiles(fx)
devtools::checkRdaFiles(fx)
inst/extdata
usethis::use_data(fx)
system.file("fx", "fx.csv", package = "readr")
#' @param v length(WinLen x 1) price vector
#' @param w length(WinLen x 1) column vector for weight
#'
#' @return semivariance of the input vector, returns a scalar
#' @export
#' @examples
#' WinLen=15
#' w <- (matrix(1, WinLen, 1)) / WinLen
#' v <- matrix(runif(WinLen, min=0, max=10), WinLen, 1)
#' semivar(v,w) #return scalar
semivar <- function(v, w) {
meanV <- as.vector(crossprod(w, v))
SV <- crossprod(w, (pmax(meanV - v, 0))^2)
return(SV) # return scalar
}
library(Hedge)
library(Hedge)
devtools::install_github("sieunyi/Hedge", build = TRUE, build_opts = c("--no-resave-data", "--no-manual"))
?install_github
library(Hedge)
usethis::use_vignette("Hedge")
library(Hedge)
load("C:/Users/Si un/Documents/new folder/Hedge/data/fx.rda")
library(Hedge)
library(Hedge)
library(devtools)
usethis::use_data(fx)
overwrite = TRUE
library(Hedge)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
library(Hedge)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
library(Hedge)
library(Hedge)
getwd()
list.files(pattern='*.Rdata')
list.files(pattern='*.RDA')
list.files()
list.files("data")
list.files(pattern='*.rda')
saveRDS(fx, file = "fx.csv")
saveRDS(fx, file = "fx.csv")
fx
getwd()
list.files('*.rda")
==''
list.files(pattern='*.rda')
getwd()
library(Hedge)
library(Hedge)
load("~/new folder/Hedge/data/fx.rda")
fx
usethis::use_data(fx, compress = "xz")
overwrite=TRUE
load("~/new folder/Hedge/data/fx.rda")
load("~/new folder/Hedge/data/fx.rda")
load("~/new folder/Hedge/data/fx.rda")
library(Hedge)
usethis::use_data(fx, compress = "xz")
library(Hedge)
