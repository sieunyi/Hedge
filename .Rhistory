soft(3,2)
soft <- function(a, lambda){
sign(a)*max(abs(a) - lambda, 0)
}
soft(3,1)
getAnywhere(soft)
soft(3,2)
library(Hedge)
?soft
library(Hedge)
?soft
soft(1,2)
?soft
devtools::install_github("sieunyi/Hedge")
use_test
styler:::style_selection()
x = matrix(rnorm(100), 0, 1)
x = c(rnorm(100), 100, 1)
x
log(x)
x = c(rand(100), 100, 1)
x = sample(1:2, 40, replace=T)
x
x = sample(1:100, 40, replace=T)
x
log(x)
diff(log(x))
x = matrix(rnorm(100), 40, 2)
x = matrix(rnorm(80), 40, 2)
x
x?adf.test
x = matrix(rnorm(80), 40, 4)
x
sp = x[,1]        # spot price
fp = x[,2:end]
p = ncol(x)
sp = x[,1]        # spot price
fp = x[,2:p]             # futures price
fp
x
fp
sp
x
fp
ld_sp = diff[log[sp]]
ld_fp = diff[log[fp]]
sp = abs(x[,1])
# spot price
fp = abs(x[,2:p])
ld_sp = diff[log[sp]]
ld_fp = diff[log[fp]]
sp
log(sp)
diff(log(sp))
ld_sp = diff(log(sp))
ld_fp = diff(log(fp))
ld_fp
adf.test(ld_fp)
??adf.test
library(readr)
fxdata <- read_csv("data/fxdata.csv")
View(fxdata)
x <- fxdata
x
x <- complete.cases(x)
x
View(fxdata)
View(fxdata)
x <- na.omit(x)
library(readr)
fxdata <- read_csv("data/fxdata.csv")
View(fxdata)
x <- na.omit(x)
x <-fxdata
x <- na.omit(x)
p = ncol(f)
p = ncol(x)
sp = x[,1]
fp = x[,2:p]
ld_sp = diff(log(sp))
ld_fp = diff(log(fp))
View(fp)
View(fp)
library(readr)
fxdata <- read_csv("data/fxdata.csv")
View(fxdata)
source("hedge.R")
fxdata <- read_csv("data/fxdata.csv")
x <-fxdata
x <- na.omit(x)
# Check the compatib
p = ncol(x)
# spot price
sp = x[,1]
# futures price
fp = x[,2:p]
# take the log difference to remove non-stationarity
ld_sp = diff(log(sp))
ld_fp = diff(log(fp))
# ADF test: Null: Unit root is present. The series is randomwalk.
adf.test(ld_fp)
require(adf.test)
require(aTSA)
adf.test(ld_fp)
View(ld_fp)
View(ld_fp)
ld_sp = diff(log(sp))
sp = x[,1]
sp
log(sp)
diff(log(sp))
diff(sp)
sp
diff(sp)
p = ncol(x)
n = nrow(x)
sp = x[,1]
# futures price
fp = x[,2:p]
lsp = log(sp)
ld_sp =  lsp[(1+lag):n] - lsp[1:(n-lag)]
ld_sp =  lsp[(1+1):n] - lsp[1:(n-1)]
lsp = log(sp)
lsp
View(sp)
View(sp)
View(lsp)
View(lsp)
lsp[(1+1):n]
lsp
lsp = as.numeric(llsp
lsp = as.numeric(lsp)
type(fxdata)
ld_sp =  lsp[(1+1):n] - lsp[1:(n-1)]
ld_sp =  lsp[(1+1):n,] - lsp[1:(n-1),]
ld_sp
lsp = log(sp)
ld_sp = lsp[(1+1):n,] - lsp[1:(n-1),]
lfp = log(fp)
ld_fp = lfp[(1+1):n,] - lfp[1:(n-1),]
adf.test(ld_fp)
size(ld_sp)
# out of sample
nObs = length(ld_sp)
nObs
ld_sp
size(ld_sp)
length(ld_sp)
nrow(ld_sp)
WinLen = 15
OoSLen = WinLen       # out of sample
nObs = nrow(ld_sp)    # Number of windows
nFut = ncol(ld_fp, 2)      # Number of futures contracts
nWin = nObs - WinLen - OoSLen + 1   # Total number of windows
nFut = ncol(ld_fp)
nObs = nrow(ld_sp)    # Number of windows
OoSLen = WinLen       # out of sample
nWin = nObs - WinLen - OoSLen + 1   # Total number of windows
HR = rep(na, nWin, nFut)
HR = rep(0, nWin, nFut)
HR = rep(0, nrow = nWin, ncol= nFut)
HR
HR = matrix(0, nrow = nWin, ncol= nFut)
histSpot = ld_btcs[1:30,]
histSpot = ld_sp[1:30,]
histSpot
# Minimum variance Hedge ratio
# WinLen = 15       # window length
OoSLen = WinLen       # out of sample
nObs = nrow(ld_sp)    # Number of windows
nFut = ncol(ld_fp)      # Number of futures contracts
nWin = nObs - WinLen - OoSLen + 1   # Total number of windows
HR = matrix(0, nrow = nWin, ncol= nFut)
for (iWin in 1:nWin){
histSpot = ld_sp[iWin:iWin+WinLen-1,]
histFut = ld_fp[iWin:iWin+WinLen-1,]
HR[iWin,] =  sd(histSpot)*cor(histSpot,histFut)/sd(histFut)
}
HR
sd(histSpot)*cor(histSpot,histFut)
sd(histSpot)
histSpot
styler:::style_selection()
usethis::use_vignette("get_started","Getting started with test package")
